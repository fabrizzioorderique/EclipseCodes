DOCUMENTAION

On this text file I will be documenting my progress with the Create Performance Task
Program and file started: 28 March 2019
Author: Piero Orderique

28 March 2019

	11:20 am
	Right off the back I faced a problem: How I get user input from a selection of choices?
	In this case I just want the user to select the difficulty of the board: easy, medium, or hard.
	SOLUTION: I found that importing javax.swing.JComboBox allows me to do just that
		boolean problemSolved = true;
		
	12:00pm
	JComboBox has proven to take a bit more time to set up than I expected. I had to end up importing
	all javax.swing, javax.awt, and javax.awt.event. I learned that these components help developers 
	build Graphical User Interfaces (GUIs). Had to learn a variety of methods and look at examples 
	from Oracle in order to get the whole thing set up.
	
	12:30pm
	Decided to add a text label to give the user feedback when they select a difficulty. This wasn't
	to difficult but I didn't know how to do it so I had to look up the methods for it. Found out
	that I just needed to create a JLabel for it and that was all. 
	
	6:30pm 
	I worked on the problems with the HaveUserSolveIt method. I decided to stop trying to use two 
	classes and instead have all the heavy lifting occurring in the actionPerformed method rather than 
	the main method.While using the while loop, I originally had a the user type in "quit" if they 
	wanted to exit the program and then have a boolean change if that string ever equaled "quit", or 
	if there were no more empty cells left to fill. I found that it would be a lot cleaner to just use 
	break; and that will exit the while loop.
	
29 March 2019

	9:30am 
	Had to fix the checking boolean methods (rowOk, colOk, subGridOk) because they weren't returning
	what they meant to return. I fixed them by adding some local variables to keep track of duplicates
	in the row/col/subGrid
	
	10:00am
	I modified my endProgram() method because if the user decided to quit before finishing the board, 
	then the program would say tell the player that their solution was wrong. This is already obvious
	to the user since they know it's wrong because they didn't finish it; instead I wanted it tell the
	user not to give up and to play again soon and that's it. 
	
	10:30am
	I changed my endProgram() method back to the way it was. I found that all I had to do was to use
	return; in haveUserSolveIt(). This would stop the program, and by putting endProgram() inside the 
	haveUserSolveIt() method, I could make sure that it wasn't called on if the user were to type quit.
	